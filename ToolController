-- Important Tool Properties
-- Tool Tip: Text that appears above the hotbar, whenever a mouse is hovering the hotbar.
-- Tool Texture: An image of said texture that appears in the hotbar, leaving blank will result in text of the tool name in the hotbar.

-- RayCasting: An invisible beam that fires to the position given from the 2D location, and passes information when it's path is interrupted.

-- # This is the client

--[[
Important Functions
:GetMouseLocation() gets the players 2D mouse location on the screen.
When using 2D locations, there are only two properties for defining the mouse position (X,Y)

:ViewportPointToRay( {2D Properties (X,Y)} )
Passing the 2D location properties into an argument, and creating a new RayCast at the 2D screen location.

:GetWorldMousePosition()

Collision Information
Instance: The BasePart or Terrain cell that the ray intersected.
Position: Where the intersection occured; usually a point directly on the surface of the part or terrain.
Material: The material at the collision point.
Normal: The vector of the intersected face. This can be used to determine which way the face is pointing.

Orgin: The start position (Vector3 point in world)

]]

local userInputService = game:GetService("UserInputService")
local players = game:GetService("Players")
local replicatedStorage = game:GetService("ReplicatedStorage")
local laserModule = require(players.LocalPlayer.PlayerScripts.LaserRenderer) -- Getting the module script, and making it a variable.

local tool = script.Parent
local eventsFolder = replicatedStorage.Events

-- The ray will only shoot between the start position, and 1000 Studs.
local max_distance = 1000
local max_laserDistance = 500
local fire_rate = 0.3

-- This will store the last time the player fired and will be updated for each shot.
local timeOfPreviousShot = 0

-- Check if enough time has passed since the previous shot was fired.
local function canShoot()
	local currentTime = tick() -- tick() returns how much time has elapsed in seconds.
	-- If the previous shot was fired for less than the fire_rate, then don't fire.
	-- Else if the previous shot was fired after fire_rate time, than you can fire.
	if currentTime - timeOfPreviousShot < fire_rate then
		return false
	end
	return true
end

local function getWorldMousePosition()
	-- :GetMouseLocation() gets the players 2D mouse location on the screen.
	-- This function has two properties when finding the 2D location, X & Y.
	-- When using 2D locations/positions, there are only two properties, that you will pass as arguments with :ViewportPointToRay()
	local mouseLocation = userInputService:GetMouseLocation()
	-- :ViewportPointToRay() creates a new Ray at the given 2D location
	-- We are using this function to pinpoint where to create the new Ray, utilizing the two properties. (X,Y) - StartPosition
	local screenToWorldRay = game:GetService("Workspace").CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)
	local directionVector = screenToWorldRay.Direction * max_distance -- Makes the Ray from the start point, and ends at the max distance
	-- Passing the origin, and calculates the end of the raycast vector.
	local raycastResult = game:GetService("Workspace"):Raycast(screenToWorldRay.Origin, directionVector)
	
	if raycastResult then
		-- Returns the 3D point of the intersection
		return raycastResult.Position
	else
		-- If not object was hit, then calculate the position at the end of the Ray.
		return screenToWorldRay.Origin + directionVector
	end
end

local function fireWeapon()
	local mouseLocation = getWorldMousePosition()
	-- Calculates the distance between the mouseLocation and the Handle, and removes that distance from the Ray distance.
	-- Represents the direction from the players tool position to the target location.
	local targetDirection = (mouseLocation - tool.Handle.Position).Unit
	-- The direction to fire the weapon, multiplied by a maximum distance.
	local directionVector = targetDirection * max_distance
	
	-- Ignores the players character to prevent them from being damaged by their raycast.
	local weaponRaycastParems = RaycastParams.new()
	-- Raycasting from the players handle position, in a direction of the raycast, to the position of the raycast hit results.
	weaponRaycastParems.FilterDescendantsInstances = {players.LocalPlayer.Character}
	local weaponRaycastResult = game:GetService("Workspace"):Raycast(tool.Handle.Position, directionVector, weaponRaycastParems)
	
	-- Checks if any objects were hit between the start and end position of the Ray.
	local hitPosition
	if weaponRaycastResult then
		hitPosition = weaponRaycastResult.Position
		
		-- Instance hit will be a child of a character model
		-- If a humanoid is found in the model then its likely a players character was hit.
		local characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass("Model")
		if characterModel then
			local humanoid = characterModel:FindFirstChild("Humanoid")
			if humanoid then
				-- Calling the remoteEvent, and firing it to the server, and passing characterModel as an argument.
				eventsFolder.DamageCharacter:FireServer(characterModel, hitPosition)
			end
		end
	else
		-- Calculate the end position based on the maximum laser distance, since nothing was hit by the Ray.
		hitPosition = tool.Handle.Position + directionVector
	end
	
	-- Updating the timeOfPreviousShot each time the weapon is fired.
	timeOfPreviousShot = tick()	
	
	-- Calling the LaserFired remoteEvent, and firing it to the server, and passing hitPosition as an argument
	eventsFolder.LaserFired:FireServer(hitPosition)
	laserModule.createLaster(tool.Handle, hitPosition)
end

local function toolEquipped()
	tool.Handle.Equip:Play()
end

local function toolActivated()
	-- Runs whenever the fire_rate cooldown is over, and allows the user to shoot.
	if canShoot() then
		fireWeapon()
	end
end

tool.Equipped:Connect(toolEquipped)
tool.Activated:Connect(toolActivated)
